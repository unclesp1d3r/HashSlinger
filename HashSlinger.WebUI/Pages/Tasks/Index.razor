@page "/tasks/"
@using Humanizer
@using HashSlinger.Shared.Generated
@using HashSlinger.WebUI.Data
@inject IHashSlingerApi HashSlingerApi
<PageTitle>View Tasks</PageTitle>

@if (_tasks == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(RefreshTasksAsync)" />
    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href="/tasks/new" />
    <MudDataGrid Items="@_tasks" Virtualize="true">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.AttackCommand" Title="Attack Command" />
            <TemplateColumn Title="Dispatched/Searched">
                <CellTemplate>
                    @($"{context.Item.KeyspaceProgress} of {context.Item.Keyspace}")
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TaskWrapper.Cracked" Title="Cracked" />
            <PropertyColumn Property="x => x.Priority" Title="Priority" />
            <PropertyColumn Property="x => x.MaxAgents" Title="Max Agents" />
            <TemplateColumn>
                <CellTemplate>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Href="@GetTaskLink(context.Item.Id)">
                        <MudIcon Icon="@Icons.Material.Filled.Edit" />
                    </MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteTask(context.Item))">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" />
                    </MudButton>

                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
}


@code {
    private List<TaskDto>? _tasks;

    protected override Task OnInitializedAsync()
    {
        return RefreshTasksAsync();
    }

    protected async void DeleteTask(TaskDto task)
    {
        Console.WriteLine($"Trying to delete {task.Id} for {task.Name.Humanize()}");
        await HashSlingerApi.DeleteTaskAsync(task.Id).ConfigureAwait(true);
        var index = _tasks!.FindIndex(a => a.Id == task.Id);
        if (index != -1)
        {
            _tasks!.RemoveAt(index);
        }
        await RefreshTasksAsync().ConfigureAwait(true);
    }

    private async Task RefreshTasksAsync()
    {
        _tasks = await HashSlingerApi.GetAllTasksAsync().ConfigureAwait(true);
    }

    private string GetTaskLink(int? id)
    {
        return $"/tasks/{id}";
    }

}
