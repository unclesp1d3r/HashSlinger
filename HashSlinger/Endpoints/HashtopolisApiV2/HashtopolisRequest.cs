namespace HashSlinger.Api.Endpoints.HashtopolisApiV2;

using System.Text.Json.Serialization;
using DTO;

/// <summary>A big, ugly DTO object to be able to deserialize the initial request from a Hashtopolis client into the appropriate DTO object.</summary>
/// <autogeneratedoc />
public record HashtopolisRequest(
    [property: JsonPropertyName("action")] string Action,
    [property: JsonPropertyName("voucher")]
    string? Voucher,
    [property: JsonPropertyName("name")] string? Name,
    [property: JsonPropertyName("token")] string Token,
    [property: JsonPropertyName("uid")] string? Uid,
    [property: JsonPropertyName("os")] int? Os,
    [property: JsonPropertyName("devices")]
    IReadOnlyList<string>? Devices,
    [property: JsonPropertyName("clientSignature")]
    string? ClientSignature,
    [property: JsonPropertyName("version")]
    string? Version,
    [property: JsonPropertyName("preprocessorId")]
    int? PreprocessorId,
    [property: JsonPropertyName("binaryVersionId")]
    int? BinaryVersionId,
    [property: JsonPropertyName("message")]
    string? Message,
    [property: JsonPropertyName("file")] string? File,
    [property: JsonPropertyName("hashlistId")]
    int? HashlistId,
    [property: JsonPropertyName("taskId")] int? TaskId,
    [property: JsonPropertyName("type")] string? Type,
    [property: JsonPropertyName("result")] string? Result,
    [property: JsonPropertyName("chunkId")]
    int? ChunkId,
    [property: JsonPropertyName("keyspaceProgress")]
    int? KeyspaceProgress,
    [property: JsonPropertyName("relativeProgress")]
    string? RelativeProgress,
    [property: JsonPropertyName("speed")] int? Speed,
    [property: JsonPropertyName("state")] int? State,
    [property: JsonPropertyName("cracks")] IReadOnlyList<List<string>?>? Cracks,
    [property: JsonPropertyName("gpuTemp")]
    IReadOnlyList<int?> GpuTemp,
    [property: JsonPropertyName("gpuUtil")]
    IReadOnlyList<int?> GpuUtil,
    [property: JsonPropertyName("numCracked")]
    int? NumCracked,
    [property: JsonPropertyName("start")] int? Start,
    [property: JsonPropertyName("end")] int? End,
    [property: JsonPropertyName("numGpus")]
    int? NumGpus,
    [property: JsonPropertyName("errors")] IReadOnlyList<string>? Errors,
    [property: JsonPropertyName("checkId")]
    int? CheckId,
    [property: JsonPropertyName("keyspace")]
    ulong? Keyspace
) : IHashtopolisMessage
{
    /// <summary>Attempts to convert to a more specific form of IHashtopolisRequest.</summary>
    /// <returns>Specific implementation of IHashtopolisRequest, or null if not possible.</returns>
    public IHashtopolisRequest? ToHashtopolisRequest()
    {
        switch (Action)
        {
            case "testConnection":
                return new TestConnectionRequest(Action);
            case "register":
                return new RegisterRequest(Action, Voucher!, Name!);
            case "updateInformation":
                return new UpdateInformationRequest(Action, Token, Uid!, Os, Devices!);
            case "login":
                return new LoginRequest(Action, ClientSignature!, Token);
            case "checkClientVersion":
                return new CheckClientVersionRequest(Action, Version!, Type!, Token);
            case "downloadBinary":
                return new DownloadBinaryRequest(Action, Type!, PreprocessorId, Token, BinaryVersionId);
            case "clientError":
                return new ClientErrorRequest(Action, TaskId, Token, ChunkId!, Message!);
            case "getFile":
                return new GetFileRequest(Action, Token, TaskId, File!);
            case "getHashlist":
                return new GetHashlistRequest(Action, Token, HashlistId.GetValueOrDefault());
            case "getTask":
                return new GetTaskRequest(Action, Token);
            case "getChunk":
                return new GetChunkRequest(Action, Token, TaskId);
            case "sendKeyspace":
                return new SendKeyspaceRequest(Action,
                    Token,
                    TaskId.GetValueOrDefault(),
                    Keyspace.GetValueOrDefault());
            case "sendBenchmark":
                return new SendBenchmarkRequest(Action, Token, TaskId, Type!, Result!);
            case "sendProgress":
                return new SendProgressRequest(Action,
                    Token,
                    ChunkId,
                    KeyspaceProgress,
                    RelativeProgress!,
                    Speed!,
                    State,
                    Cracks!,
                    GpuTemp!,
                    GpuUtil!);
            case "getFileStatus":
                return new GetFileStatusRequest(Action, Token);
            case "getHealthCheck":
                return new GetHealthCheckRequest(Action, Token);
            case "SendHealthCheck":
                return new SendHealthCheckRequest(Action,
                    Token,
                    NumCracked,
                    Start,
                    End,
                    NumGpus,
                    Errors!,
                    CheckId);
            case "deregister":
                return new DeregisterRequest(Action, Token);
            default:
                return null;
        }
    }
}
