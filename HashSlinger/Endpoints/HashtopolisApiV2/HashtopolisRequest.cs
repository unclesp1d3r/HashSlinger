namespace HashSlinger.Api.Endpoints.HashtopolisApiV2;

using System.Text.Json.Serialization;
using DTO;

/// <summary>
///     A big, ugly DTO object to be able to deserialize the initial request from a Hashtopolis client into the
///     appropriate DTO object.
/// </summary>
/// <autogeneratedoc />
/// <remarks>This thing is a mess and I welcome ideas on how to clean it up.</remarks>
public record HashtopolisRequest
(
    [property:JsonPropertyName("action")]
     string? Action = default,
     [property:JsonPropertyName("voucher")]
     string? Voucher = default,
     [property:JsonPropertyName("name")]
     string? Name = default,
     [property:JsonPropertyName("token")]
     string? Token = default,
     [property:JsonPropertyName("uid")]
     string? Uid = default,
     [property:JsonPropertyName("os")]
     int? Os = default,
     [property:JsonPropertyName("devices")]
     ICollection<string>? Devices = default,
     [property:JsonPropertyName("clientSignature")]
     string? ClientSignature = default,
     [property:JsonPropertyName("version")]
     string? Version = default,
     [property:JsonPropertyName("preprocessorId")]
     int? PreprocessorId = default,
     [property:JsonPropertyName("binaryVersionId")]
     int? BinaryVersionId = default,
     [property:JsonPropertyName("message")]
     string? Message = default,
     [property:JsonPropertyName("file")]
     string? File = default,
     [property:JsonPropertyName("hashlistId")]
     int? HashlistId = default,
     [property:JsonPropertyName("taskId")]
     int? TaskId = default,
     [property:JsonPropertyName("type")]
     string? Type = default,
     [property:JsonPropertyName("result")]
     string? Result = default,
     [property:JsonPropertyName("chunkId")]
     int? ChunkId = default,
     [property:JsonPropertyName("keyspaceProgress")]
     int? KeyspaceProgress = default,
     [property:JsonPropertyName("relativeProgress")]
     string? RelativeProgress = default,
     [property:JsonPropertyName("speed")]
     int? Speed = default,
     [property:JsonPropertyName("state")]
     int? State = default,
     [property:JsonPropertyName("cracks")]
     ICollection<ICollection<string>?>? Cracks = default,
     [property:JsonPropertyName("gpuTemp")]
     ICollection<int>? GpuTemp = default,
     [property:JsonPropertyName("gpuUtil")]
     ICollection<int>? GpuUtil = default,
     [property:JsonPropertyName("numCracked")]
     int? NumCracked = default,
     [property:JsonPropertyName("start")]
     int? Start = default,
     [property:JsonPropertyName("end")]
     int? End = default,
     [property:JsonPropertyName("numGpus")]
     int? NumGpus = default,
     [property:JsonPropertyName("errors")]
     ICollection<string>? Errors = default,
     [property:JsonPropertyName("checkId")]
     int? CheckId = default,
     [property:JsonPropertyName("keyspace")]
     ulong? Keyspace = default,
     [property:JsonPropertyName("response")]
     string? Response = default) : IHashtopolisMessage
{

    /// <summary>Attempts to convert to a more specific form of IHashtopolisRequest.</summary>
    /// <returns>Specific implementation of IHashtopolisRequest, or null if not possible.</returns>
    /// <remarks>
    ///     Some of these null checks might be wrong, or should return other errors. This will need constant
    ///     attention as I finish out the API. Also, there doesn't appear to be any instructions in the spec on
    ///     whether the action is case sensitive or not.
    /// </remarks>
    public IHashtopolisRequest? ToHashtopolisRequest()
    {
        if (Action == null) return null;

        return Action switch
        {
            "testConnection" => new TestConnectionRequest(Action!),
            "register" => Voucher != null && Name != null
                ? new RegisterRequest(Action!, Voucher, Name)
                : null,
            "updateInformation" => Token != null && Uid != null && Devices != null
                ? new UpdateInformationRequest(Action!, Token, Uid, Os, Devices)
                : null,
            "login" => ClientSignature != null && Token != null
                ? new LoginRequest(Action!, ClientSignature, Token)
                : null,
            "checkClientVersion" => Version != null && Type != null && Token != null
                ? new CheckClientVersionRequest(Action!, Version, Type, Token)
                : null,
            "downloadBinary" => Type != null && Token != null
                ? new DownloadBinaryRequest(Action!, Type, PreprocessorId, Token, BinaryVersionId)
                : null,
            "clientError" => Token != null && Message != null
                ? new ClientErrorRequest(Action!, TaskId, Token, ChunkId, Message)
                : null,
            "getFile" => Token != null && File != null
                ? new GetFileRequest(Action!, Token, TaskId, File)
                : null,
            "getHashlist" => Token != null && HashlistId != null && Action != null
                ? new GetHashlistRequest(Action!, Token, HashlistId.GetValueOrDefault())
                : null,
            "getTask" => Token != null ? new GetTaskRequest(Action!, Token, null) : null,
            "getChunk" => Token != null && TaskId != null
                ? new GetChunkRequest(Action!, Token, TaskId)
                : null,
            "sendKeyspace" => Token != null && TaskId != null && Keyspace != null
                ? new SendKeyspaceRequest(Action!,
                    Token,
                    TaskId.GetValueOrDefault(),
                    Keyspace.GetValueOrDefault())
                : null,
            "sendBenchmark" => Token != null && TaskId != null && Type != null && Result != null
                ? new SendBenchmarkRequest(Action!, Token, TaskId, Type, Result)
                : null,
            "sendProgress" => Token != null
                              && ChunkId != null
                              && KeyspaceProgress != null
                              && RelativeProgress != null
                              && Speed != null
                              && State != null
                              && Cracks != null
                              && GpuTemp != null
                              && GpuUtil != null
                ? new SendProgressRequest(Action!,
                    Token,
                    ChunkId,
                    KeyspaceProgress,
                    RelativeProgress,
                    Speed,
                    State,
                    Cracks!,
                    GpuTemp,
                    GpuUtil)
                : null,
            "getFileStatus" => Token != null ? new GetFileStatusRequest(Action!, Token) : null,
            "getHealthCheck" => Token != null ? new GetHealthCheckRequest(Action!, Token) : null,
            "SendHealthCheck" => Token != null
                                 && NumCracked != null
                                 && Start != null
                                 && End != null
                                 && NumGpus != null
                                 && Errors != null
                                 && CheckId != null
                ? new SendHealthCheckRequest(Action!, Token, NumCracked, Start, End, NumGpus, Errors, CheckId)
                : null,
            "deregister" => Token != null ? new DeregisterRequest(Action!, Token) : null,
            _ => null
        };
    }
}
