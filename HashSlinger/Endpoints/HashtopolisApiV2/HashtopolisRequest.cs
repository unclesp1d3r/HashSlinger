namespace HashSlinger.Api.Endpoints.HashtopolisApiV2;

using System.Text.Json.Serialization;
using DTO;

/// <summary>
///     A big, ugly DTO object to be able to deserialize the initial request from a Hashtopolis client into the
///     appropriate DTO object.
/// </summary>
/// <autogeneratedoc />
/// <remarks>This thing is a mess and I welcome ideas on how to clean it up.</remarks>
public record HashtopolisRequest : IHashtopolisMessage
{




    /// <summary>
    ///     A big, ugly DTO object to be able to deserialize the initial request from a Hashtopolis client into the
    ///     appropriate DTO object.
    /// </summary>
    /// <autogeneratedoc />
    public HashtopolisRequest(
        string? Action = null,
        string? Voucher = null,
        string? Name = null,
        string? Token = null,
        string? Uid = null,
        int? Os = null,
        ICollection<string>? Devices = null,
        string? ClientSignature = null,
        string? Version = null,
        int? PreprocessorId = null,
        int? BinaryVersionId = null,
        string? Message = null,
        string? File = null,
        int? HashlistId = null,
        int? TaskId = null,
        string? Type = null,
        string? Result = null,
        int? ChunkId = null,
        int? KeyspaceProgress = null,
        string? RelativeProgress = null,
        int? Speed = null,
        int? State = null,
        ICollection<ICollection<string>?>? Cracks = null,
        ICollection<int>? GpuTemp = null,
        ICollection<int>? GpuUtil = null,
        int? NumCracked = null,
        int? Start = null,
        int? End = null,
        int? NumGpus = null,
        ICollection<string>? Errors = null,
        int? CheckId = null,
        ulong? Keyspace = null,
        string? Response = null
    )
    {
        this.Action = Action;
        this.Voucher = Voucher;
        this.Name = Name;
        this.Token = Token;
        this.Uid = Uid;
        this.Os = Os;
        this.Devices = Devices!;
        this.ClientSignature = ClientSignature;
        this.Version = Version;
        this.PreprocessorId = PreprocessorId;
        this.BinaryVersionId = BinaryVersionId;
        this.Message = Message;
        this.File = File;
        this.HashlistId = HashlistId;
        this.TaskId = TaskId;
        this.Type = Type;
        this.Result = Result;
        this.ChunkId = ChunkId;
        this.KeyspaceProgress = KeyspaceProgress;
        this.RelativeProgress = RelativeProgress;
        this.Speed = Speed;
        this.State = State;
        this.Cracks = Cracks;
        this.GpuTemp = GpuTemp;
        this.GpuUtil = GpuUtil;
        this.NumCracked = NumCracked;
        this.Start = Start;
        this.End = End;
        this.NumGpus = NumGpus;
        this.Errors = Errors;
        this.CheckId = CheckId;
        this.Keyspace = Keyspace;
        this.Response = Response;
    }

    /// <summary>Gets the action.</summary>
    /// <value>The action.</value>
    [JsonPropertyName("action")]
    public string? Action { get; init; }

    /// <summary>Gets the voucher.</summary>
    /// <value>The voucher.</value>
    [JsonPropertyName("voucher")]
    public string? Voucher { get; init; }

    /// <summary>Gets the name.</summary>
    /// <value>The name.</value>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    /// <summary>Gets the token.</summary>
    /// <value>The token.</value>
    [JsonPropertyName("token")]
    public string? Token { get; init; }

    /// <summary>Gets the uid.</summary>
    /// <value>The uid.</value>
    [JsonPropertyName("uid")]
    public string? Uid { get; init; }

    /// <summary>Gets the OS.</summary>
    /// <value>The os.</value>
    [JsonPropertyName("os")]
    public int? Os { get; init; }

    /// <summary>Gets the devices.</summary>
    /// <value>The devices.</value>
    [JsonPropertyName("devices")]
    public ICollection<string> Devices { get; init; } = null!;

    /// <summary>Gets the client signature.</summary>
    /// <value>The client signature.</value>
    [JsonPropertyName("clientSignature")]
    public string? ClientSignature { get; init; }

    /// <summary>Gets the version.</summary>
    /// <value>The version.</value>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    /// <summary>Gets the preprocessor identifier.</summary>
    /// <value>The preprocessor identifier.</value>
    [JsonPropertyName("preprocessorId")]
    public int? PreprocessorId { get; init; }

    /// <summary>Gets the binary version identifier.</summary>
    /// <value>The binary version identifier.</value>
    [JsonPropertyName("binaryVersionId")]
    public int? BinaryVersionId { get; init; }

    /// <summary>Gets the message.</summary>
    /// <value>The message.</value>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    /// <summary>Gets the file.</summary>
    /// <value>The file.</value>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    /// <summary>Gets the hashlist identifier.</summary>
    /// <value>The hashlist identifier.</value>
    [JsonPropertyName("hashlistId")]
    public int? HashlistId { get; init; }

    /// <summary>Gets the task identifier.</summary>
    /// <value>The task identifier.</value>
    [JsonPropertyName("taskId")]
    public int? TaskId { get; init; }

    /// <summary>Gets the type.</summary>
    /// <value>The type.</value>
    [JsonPropertyName("type")]
    public string? Type { get; init; }

    /// <summary>Gets the result.</summary>
    /// <value>The result.</value>
    [JsonPropertyName("result")]
    public string? Result { get; init; }

    /// <summary>Gets the chunk identifier.</summary>
    /// <value>The chunk identifier.</value>
    [JsonPropertyName("chunkId")]
    public int? ChunkId { get; init; }

    /// <summary>Gets the keyspace progress.</summary>
    /// <value>The keyspace progress.</value>
    [JsonPropertyName("keyspaceProgress")]
    public int? KeyspaceProgress { get; init; }

    /// <summary>Gets the relative progress.</summary>
    /// <value>The relative progress.</value>
    [JsonPropertyName("relativeProgress")]
    public string? RelativeProgress { get; init; }

    /// <summary>Gets the speed.</summary>
    /// <value>The speed.</value>
    [JsonPropertyName("speed")]
    public int? Speed { get; init; }

    /// <summary>Gets the state.</summary>
    /// <value>The state.</value>
    [JsonPropertyName("state")]
    public int? State { get; init; }

    /// <summary>Gets the cracks.</summary>
    /// <value>The cracks.</value>
    [JsonPropertyName("cracks")]
    public ICollection<ICollection<string>?>? Cracks { get; init; }

    /// <summary>Gets the gpu temporary.</summary>
    /// <value>The gpu temporary.</value>
    [JsonPropertyName("gpuTemp")]
    public ICollection<int>? GpuTemp { get; init; }

    /// <summary>Gets the gpu utility.</summary>
    /// <value>The gpu utility.</value>
    [JsonPropertyName("gpuUtil")]
    public ICollection<int>? GpuUtil { get; init; }

    /// <summary>Gets the number cracked.</summary>
    /// <value>The number cracked.</value>
    [JsonPropertyName("numCracked")]
    public int? NumCracked { get; init; }

    /// <summary>Gets the start.</summary>
    /// <value>The start.</value>
    [JsonPropertyName("start")]
    public int? Start { get; init; }

    /// <summary>Gets the end.</summary>
    /// <value>The end.</value>
    [JsonPropertyName("end")]
    public int? End { get; init; }

    /// <summary>Gets the number gpus.</summary>
    /// <value>The number gpus.</value>
    [JsonPropertyName("numGpus")]
    public int? NumGpus { get; init; }

    /// <summary>Gets the errors.</summary>
    /// <value>The errors.</value>
    [JsonPropertyName("errors")]
    public ICollection<string>? Errors { get; init; }

    /// <summary>Gets the check identifier.</summary>
    /// <value>The check identifier.</value>
    [JsonPropertyName("checkId")]
    public int? CheckId { get; init; }

    /// <summary>Gets the keyspace.</summary>
    /// <value>The keyspace.</value>
    [JsonPropertyName("keyspace")]
    public ulong? Keyspace { get; init; }

    /// <summary>Gets the response. This should only be set when the original request was an error.</summary>
    /// <value>The response.</value>
    [JsonPropertyName("response")]
    public string? Response { get; init; }

    /// <summary>Attempts to convert to a more specific form of IHashtopolisRequest.</summary>
    /// <returns>Specific implementation of IHashtopolisRequest, or null if not possible.</returns>
    /// <remarks>
    ///     Some of these null checks might be wrong, or should return other errors. This will need constant
    ///     attention as I finish out the API. Also, there doesn't appear to be any instructions in the spec on
    ///     whether the action is case sensitive or not.
    /// </remarks>
    public IHashtopolisRequest? ToHashtopolisRequest()
    {
        if (Action == null) return null;

        return Action switch
        {
            "testConnection" => new TestConnectionRequest(Action!),
            "register" => Voucher != null && Name != null
                ? new RegisterRequest(Action!, Voucher, Name)
                : null,
            "updateInformation" => Token != null && Uid != null && Devices != null
                ? new UpdateInformationRequest(Action!, Token, Uid, Os, Devices)
                : null,
            "login" => ClientSignature != null && Token != null
                ? new LoginRequest(Action!, ClientSignature, Token)
                : null,
            "checkClientVersion" => Version != null && Type != null && Token != null
                ? new CheckClientVersionRequest(Action!, Version, Type, Token)
                : null,
            "downloadBinary" => Type != null && Token != null
                ? new DownloadBinaryRequest(Action!, Type, PreprocessorId, Token, BinaryVersionId)
                : null,
            "clientError" => Token != null && Message != null
                ? new ClientErrorRequest(Action!, TaskId, Token, ChunkId, Message)
                : null,
            "getFile" => Token != null && File != null
                ? new GetFileRequest(Action!, Token, TaskId, File)
                : null,
            "getHashlist" => Token != null && HashlistId != null && Action != null
                ? new GetHashlistRequest(Action!, Token, HashlistId.GetValueOrDefault())
                : null,
            "getTask" => Token != null ? new GetTaskRequest(Action!, Token, null) : null,
            "getChunk" => Token != null && TaskId != null
                ? new GetChunkRequest(Action!, Token, TaskId)
                : null,
            "sendKeyspace" => Token != null && TaskId != null && Keyspace != null
                ? new SendKeyspaceRequest(Action!,
                    Token,
                    TaskId.GetValueOrDefault(),
                    Keyspace.GetValueOrDefault())
                : null,
            "sendBenchmark" => Token != null && TaskId != null && Type != null && Result != null
                ? new SendBenchmarkRequest(Action!, Token, TaskId, Type, Result)
                : null,
            "sendProgress" => Token != null
                              && ChunkId != null
                              && KeyspaceProgress != null
                              && RelativeProgress != null
                              && Speed != null
                              && State != null
                              && Cracks != null
                              && GpuTemp != null
                              && GpuUtil != null
                ? new SendProgressRequest(Action!,
                    Token,
                    ChunkId,
                    KeyspaceProgress,
                    RelativeProgress,
                    Speed,
                    State,
                    Cracks!,
                    GpuTemp,
                    GpuUtil)
                : null,
            "getFileStatus" => Token != null ? new GetFileStatusRequest(Action!, Token) : null,
            "getHealthCheck" => Token != null ? new GetHealthCheckRequest(Action!, Token) : null,
            "SendHealthCheck" => Token != null
                                 && NumCracked != null
                                 && Start != null
                                 && End != null
                                 && NumGpus != null
                                 && Errors != null
                                 && CheckId != null
                ? new SendHealthCheckRequest(Action!, Token, NumCracked, Start, End, NumGpus, Errors, CheckId)
                : null,
            "deregister" => Token != null ? new DeregisterRequest(Action!, Token) : null,
            _ => null
        };
    }
}
