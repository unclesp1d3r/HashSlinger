// <auto-generated />

#nullable disable

namespace HashSlinger.Api.Migrations
{
    using System.Net;
    using Data;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Migrations;

    [DbContext(typeof(HashSlingerContext))]
    [Migration("20230701175923_EvenMoreOnDeleteChanges")]
    partial class EvenMoreOnDeleteChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessGroupAgent", b =>
                {
                    b.Property<int>("AccessGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentsId")
                        .HasColumnType("integer");

                    b.HasKey("AccessGroupsId", "AgentsId");

                    b.HasIndex("AgentsId");

                    b.ToTable("AccessGroupAgent");
                });

            modelBuilder.Entity("AccessGroupUser", b =>
                {
                    b.Property<int>("AccessGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("AccessGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AccessGroupUser");
                });

            modelBuilder.Entity("FilePreconfiguredTask", b =>
                {
                    b.Property<int>("FilesId")
                        .HasColumnType("integer");

                    b.Property<int>("PreconfiguredTasksId")
                        .HasColumnType("integer");

                    b.HasKey("FilesId", "PreconfiguredTasksId");

                    b.HasIndex("PreconfiguredTasksId");

                    b.ToTable("FilePreconfiguredTask");
                });

            modelBuilder.Entity("FileTask", b =>
                {
                    b.Property<int>("FilesId")
                        .HasColumnType("integer");

                    b.Property<int>("TasksId")
                        .HasColumnType("integer");

                    b.HasKey("FilesId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("FileTask");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AccessGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientSignature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CommandParameters")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("CpuOnly")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Devices")
                        .HasColumnType("text[]");

                    b.Property<bool>("IgnoreErrors")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrusted")
                        .HasColumnType("boolean");

                    b.Property<int>("LastAction")
                        .HasColumnType("integer");

                    b.Property<IPAddress>("LastSeenIpAddress")
                        .HasColumnType("inet");

                    b.Property<DateTime>("LastSeenTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OperatingSystem")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("Uid");

                    b.HasIndex("UserId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AgentError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChunkId")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ChunkId");

                    b.HasIndex("TaskId");

                    b.ToTable("AgentError");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AgentStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int>("StatType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentStat");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.ApiGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiGroup");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ApiGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndValid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartValid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKey");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("Benchmark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Chunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Checkpoint")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Cracked")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric(20,0)");

                    b.Property<float?>("Progress")
                        .HasColumnType("real");

                    b.Property<decimal>("Skip")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("SolveTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Speed")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Chunks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.CrackerBinaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsChunkingAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CrackerBinaryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsChunkingAvailable = true,
                            TypeName = "hashcat"
                        });
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.DownloadableBinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Executable")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<List<string>>("OperatingSystems")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("DownloadableBinaries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DownloadableBinary");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FileGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<long?>("LineCount")
                        .HasColumnType("bigint");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.FileDelete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FileDeletes");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.FileDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FileDownload");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HashBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChunkId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CrackPos")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HashlistId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCracked")
                        .HasColumnType("boolean");

                    b.Property<string>("Plaintext")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("TimeCracked")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HashBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("HashBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HashType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("HashcatId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSalted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSlowHash")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HashcatId")
                        .IsUnique();

                    b.ToTable("HashTypes");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Hashlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<short>("BrainFeatures")
                        .HasColumnType("smallint");

                    b.Property<int>("BrainId")
                        .HasColumnType("integer");

                    b.Property<int>("Cracked")
                        .HasColumnType("integer");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<int>("HashCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("HashTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HexSalt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSalted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SaltSeparator")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("HashTypeId");

                    b.HasIndex("IsSecret");

                    b.ToTable("Hashlists");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HealthCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackCmd")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("CheckType")
                        .HasColumnType("integer");

                    b.Property<int>("CrackerBinaryId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedCracks")
                        .HasColumnType("integer");

                    b.Property<string>("HashListAlias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HashTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<List<string>>("TestHashes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CrackerBinaryId");

                    b.HasIndex("HashTypeId");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HealthCheckAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int?>("Cracked")
                        .HasColumnType("integer");

                    b.Property<decimal?>("End")
                        .HasColumnType("numeric(20,0)");

                    b.Property<List<string>>("Errors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("HealthCheckId")
                        .HasColumnType("integer");

                    b.Property<int?>("NumGpus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Start")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("HealthCheckId");

                    b.ToTable("HealthCheckAgents");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSetting");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.PreconfiguredTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackCommand")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ChunkTime")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CrackerBinaryTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCpuTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaskImport")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmall")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAgents")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("StatusTimer")
                        .HasColumnType("integer");

                    b.Property<bool>("UseNewBench")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CrackerBinaryTypeId");

                    b.ToTable("PreconfiguredTask");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.RegistrationVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("Voucher")
                        .IsUnique();

                    b.ToTable("RegistrationVouchers");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SessionLifetime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SessionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SpeedValue")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Speed");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Supertask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Supertask");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.SupertaskPretask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PreconfiguredTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("PretaskId")
                        .HasColumnType("integer");

                    b.Property<int>("SupertaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreconfiguredTaskId");

                    b.HasIndex("SupertaskId");

                    b.ToTable("SupertaskPretask");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackCommand")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ChunkSize")
                        .HasColumnType("integer");

                    b.Property<int>("ChunkTime")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CrackerBinaryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CrackerBinaryTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("EnforcePipe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCpuTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmall")
                        .HasColumnType("boolean");

                    b.Property<long>("Keyspace")
                        .HasColumnType("bigint");

                    b.Property<decimal>("KeyspaceProgress")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("MaxAgents")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreprocessorCommand")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("PreprocessorId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<decimal>("SkipKeyspace")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("StaticChunks")
                        .HasColumnType("integer");

                    b.Property<int>("StatusTimer")
                        .HasColumnType("integer");

                    b.Property<int>("TaskWrapperId")
                        .HasColumnType("integer");

                    b.Property<bool>("UseNewBenchmark")
                        .HasColumnType("boolean");

                    b.Property<bool>("UsePreprocessor")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CrackerBinaryId");

                    b.HasIndex("CrackerBinaryTypeId");

                    b.HasIndex("PreprocessorId");

                    b.HasIndex("TaskWrapperId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.TaskDebugOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskDebugOutput");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.TaskWrapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Cracked")
                        .HasColumnType("integer");

                    b.Property<int>("HashlistId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("HashlistId");

                    b.ToTable("TaskWrapper");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Zap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HashlistId")
                        .HasColumnType("integer");

                    b.Property<long>("SolveTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("HashlistId");

                    b.ToTable("Zap");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AgentBinary", b =>
                {
                    b.HasBaseType("HashSlinger.Shared.Models.DownloadableBinary");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UpdateAvailable")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UpdateTrack")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasIndex("Type");

                    b.HasDiscriminator().HasValue("AgentBinary");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.CrackerBinary", b =>
                {
                    b.HasBaseType("HashSlinger.Shared.Models.DownloadableBinary");

                    b.Property<int>("CrackerBinaryTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("CrackerBinaryTypeId");

                    b.HasDiscriminator().HasValue("CrackerBinary");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Preprocessor", b =>
                {
                    b.HasBaseType("HashSlinger.Shared.Models.DownloadableBinary");

                    b.Property<string>("KeyspaceCommand")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LimitCommand")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SkipCommand")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasDiscriminator().HasValue("Preprocessor");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.BinaryHash", b =>
                {
                    b.HasBaseType("HashSlinger.Shared.Models.HashBase");

                    b.Property<string>("Essid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("HashBytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasIndex("ChunkId");

                    b.HasIndex("HashlistId");

                    b.HasIndex("IsCracked");

                    b.HasDiscriminator().HasValue("BinaryHash");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Hash", b =>
                {
                    b.HasBaseType("HashSlinger.Shared.Models.HashBase");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("ChunkId");

                    b.HasIndex("HashlistId");

                    b.HasIndex("IsCracked");

                    b.HasDiscriminator().HasValue("Hash");
                });

            modelBuilder.Entity("AccessGroupAgent", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", null)
                        .WithMany()
                        .HasForeignKey("AccessGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessGroupUser", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", null)
                        .WithMany()
                        .HasForeignKey("AccessGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilePreconfiguredTask", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.File", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.PreconfiguredTask", null)
                        .WithMany()
                        .HasForeignKey("PreconfiguredTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileTask", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.File", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Agent", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.User", "User")
                        .WithMany("Agents")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AgentError", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Errors")
                        .HasForeignKey("AgentId")
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Chunk", "Chunk")
                        .WithMany("Errors")
                        .HasForeignKey("ChunkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HashSlinger.Shared.Models.Task", "Task")
                        .WithMany("AgentErrors")
                        .HasForeignKey("TaskId");

                    b.Navigation("Agent");

                    b.Navigation("Chunk");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AgentStat", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Stats")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.ApiKey", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.ApiGroup", "ApiGroup")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ApiGroupId")
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Assignment", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Assignments")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Task", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Chunk", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Chunks")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HashSlinger.Shared.Models.Task", "Task")
                        .WithMany("Chunks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.DownloadableBinary", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.File", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", "AccessGroup")
                        .WithMany("Files")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.FileDownload", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.File", "File")
                        .WithMany("FileDownloads")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Hashlist", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", "AccessGroup")
                        .WithMany("Hashlists")
                        .HasForeignKey("AccessGroupId")
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.HashType", "HashType")
                        .WithMany("Hashlists")
                        .HasForeignKey("HashTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");

                    b.Navigation("HashType");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HealthCheck", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.CrackerBinary", "CrackerBinary")
                        .WithMany("HealthChecks")
                        .HasForeignKey("CrackerBinaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.HashType", "HashType")
                        .WithMany("HealthChecks")
                        .HasForeignKey("HashTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrackerBinary");

                    b.Navigation("HashType");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HealthCheckAgent", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("HealthCheckAgents")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.HealthCheck", "HealthCheck")
                        .WithMany("HealthCheckAgents")
                        .HasForeignKey("HealthCheckId")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.NotificationSetting", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.PreconfiguredTask", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.CrackerBinaryType", "CrackerBinaryType")
                        .WithMany("Pretasks")
                        .HasForeignKey("CrackerBinaryTypeId")
                        .IsRequired();

                    b.Navigation("CrackerBinaryType");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.RegistrationVoucher", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", "AccessGroup")
                        .WithMany("RegistrationVouchers")
                        .HasForeignKey("AccessGroupId");

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Session", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Speed", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Speeds")
                        .HasForeignKey("AgentId")
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Task", "Task")
                        .WithMany("Speeds")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.SupertaskPretask", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.PreconfiguredTask", "PreconfiguredTask")
                        .WithMany("SupertaskPretasks")
                        .HasForeignKey("PreconfiguredTaskId")
                        .IsRequired();

                    b.HasOne("HashSlinger.Shared.Models.Supertask", "Supertask")
                        .WithMany("SupertaskPretasks")
                        .HasForeignKey("SupertaskId")
                        .IsRequired();

                    b.Navigation("PreconfiguredTask");

                    b.Navigation("Supertask");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Task", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.CrackerBinary", "CrackerBinary")
                        .WithMany("Tasks")
                        .HasForeignKey("CrackerBinaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HashSlinger.Shared.Models.CrackerBinaryType", "CrackerBinaryType")
                        .WithMany("Tasks")
                        .HasForeignKey("CrackerBinaryTypeId");

                    b.HasOne("HashSlinger.Shared.Models.Preprocessor", "Preprocessor")
                        .WithMany("Tasks")
                        .HasForeignKey("PreprocessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HashSlinger.Shared.Models.TaskWrapper", "TaskWrapper")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskWrapperId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("CrackerBinary");

                    b.Navigation("CrackerBinaryType");

                    b.Navigation("Preprocessor");

                    b.Navigation("TaskWrapper");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.TaskDebugOutput", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Task", "Task")
                        .WithMany("TaskDebugOutputs")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.TaskWrapper", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.AccessGroup", "AccessGroup")
                        .WithMany("TaskWrappers")
                        .HasForeignKey("AccessGroupId");

                    b.HasOne("HashSlinger.Shared.Models.Hashlist", "Hashlist")
                        .WithMany("TaskWrappers")
                        .HasForeignKey("HashlistId")
                        .IsRequired();

                    b.Navigation("AccessGroup");

                    b.Navigation("Hashlist");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Zap", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Agent", "Agent")
                        .WithMany("Zaps")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HashSlinger.Shared.Models.Hashlist", "Hashlist")
                        .WithMany("Zaps")
                        .HasForeignKey("HashlistId")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Hashlist");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.CrackerBinary", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.CrackerBinaryType", "CrackerBinaryType")
                        .WithMany("CrackerBinaries")
                        .HasForeignKey("CrackerBinaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrackerBinaryType");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.BinaryHash", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Chunk", "Chunk")
                        .WithMany("BinaryHashes")
                        .HasForeignKey("ChunkId");

                    b.HasOne("HashSlinger.Shared.Models.Hashlist", "Hashlist")
                        .WithMany("BinaryHashes")
                        .HasForeignKey("HashlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chunk");

                    b.Navigation("Hashlist");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Hash", b =>
                {
                    b.HasOne("HashSlinger.Shared.Models.Chunk", "Chunk")
                        .WithMany("Hashes")
                        .HasForeignKey("ChunkId");

                    b.HasOne("HashSlinger.Shared.Models.Hashlist", "Hashlist")
                        .WithMany("Hashes")
                        .HasForeignKey("HashlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chunk");

                    b.Navigation("Hashlist");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.AccessGroup", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Hashlists");

                    b.Navigation("RegistrationVouchers");

                    b.Navigation("TaskWrappers");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Agent", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Chunks");

                    b.Navigation("Errors");

                    b.Navigation("HealthCheckAgents");

                    b.Navigation("Speeds");

                    b.Navigation("Stats");

                    b.Navigation("Zaps");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.ApiGroup", b =>
                {
                    b.Navigation("ApiKeys");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Chunk", b =>
                {
                    b.Navigation("BinaryHashes");

                    b.Navigation("Errors");

                    b.Navigation("Hashes");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.CrackerBinaryType", b =>
                {
                    b.Navigation("CrackerBinaries");

                    b.Navigation("Pretasks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.File", b =>
                {
                    b.Navigation("FileDownloads");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HashType", b =>
                {
                    b.Navigation("Hashlists");

                    b.Navigation("HealthChecks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Hashlist", b =>
                {
                    b.Navigation("BinaryHashes");

                    b.Navigation("Hashes");

                    b.Navigation("TaskWrappers");

                    b.Navigation("Zaps");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.HealthCheck", b =>
                {
                    b.Navigation("HealthCheckAgents");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.PreconfiguredTask", b =>
                {
                    b.Navigation("SupertaskPretasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Supertask", b =>
                {
                    b.Navigation("SupertaskPretasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Task", b =>
                {
                    b.Navigation("AgentErrors");

                    b.Navigation("Assignments");

                    b.Navigation("Chunks");

                    b.Navigation("Speeds");

                    b.Navigation("TaskDebugOutputs");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.TaskWrapper", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.User", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("ApiKeys");

                    b.Navigation("NotificationSettings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.CrackerBinary", b =>
                {
                    b.Navigation("HealthChecks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HashSlinger.Shared.Models.Preprocessor", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
