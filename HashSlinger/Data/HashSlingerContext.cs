namespace HashSlinger.Api.Data;

using Microsoft.EntityFrameworkCore;
using Shared.Models;

/// <summary>A DbContext instance representing a session with the database.</summary>
/// <autogeneratedoc />
public class HashSlingerContext : DbContext
{
    /// <summary>Initializes a new instance of the <see cref="HashSlingerContext" /> class.</summary>
    /// <param name="options">The options.</param>
    /// <autogeneratedoc />
    public HashSlingerContext(DbContextOptions<HashSlingerContext> options) : base(options) { }

    /// <summary>Gets or sets the access groups.</summary>
    /// <value>The access groups.</value>
    public DbSet<AccessGroup> AccessGroups { get; set; } = null!;

    /// <summary>Gets or sets the agent binaries.</summary>
    /// <value>The agent binaries.</value>
    public DbSet<AgentBinary> AgentBinaries { get; set; } = null!;

    /// <summary>Gets or sets the agents.</summary>
    /// <value>The agents.</value>
    public DbSet<Agent> Agents { get; set; } = null!;

    /// <summary>Gets or sets the binary hashes.</summary>
    /// <value>The binary hashes.</value>
    public DbSet<BinaryHash> BinaryHashes { get; set; } = null!;

    /// <summary>Gets or sets the cracker binaries.</summary>
    /// <value>The cracker binaries.</value>
    public DbSet<CrackerBinary> CrackerBinaries { get; set; } = null!;

    /// <summary>Gets or sets the cracker binary types.</summary>
    /// <value>The cracker binary types.</value>
    public DbSet<CrackerBinaryType> CrackerBinaryTypes { get; set; } = null!;

    /// <summary>Gets or sets the downloadable binaries.</summary>
    /// <value>The downloadable binaries.</value>
    public DbSet<DownloadableBinary> DownloadableBinaries { get; set; } = null!;

    /// <summary>Gets or sets the deleted file events.</summary>
    /// <value>The files that have been deleted from the server.</value>
    public DbSet<FileDelete> FileDeletes { get; set; } = null!;

    /// <summary>Gets or sets the files.</summary>
    /// <value>The files.</value>
    public DbSet<File> Files { get; set; } = null!;

    /// <summary>Gets or sets the hashes.</summary>
    /// <value>The hashes.</value>
    public DbSet<Hash> Hashes { get; set; } = null!;

    /// <summary>Gets or sets the hashlists.</summary>
    /// <value>The hashlists.</value>
    public DbSet<Hashlist> Hashlists { get; set; } = null!;

    /// <summary>Gets or sets the hash types.</summary>
    /// <value>The hash types.</value>
    public DbSet<HashType> HashTypes { get; set; } = null!;

    /// <summary>Gets or sets the health check agents.</summary>
    /// <value>The health check agents.</value>
    public DbSet<HealthCheckAgent> HealthCheckAgents { get; set; } = null!;

    /// <summary>Gets or sets the health checks.</summary>
    /// <value>The health checks.</value>
    public DbSet<HealthCheck> HealthChecks { get; set; } = null!;

    /// <summary>Gets or sets the log entries.</summary>
    /// <value>The log entries.</value>
    public DbSet<LogEntry> LogEntries { get; set; } = null!;

    /// <summary>Gets or sets the registration vouchers.</summary>
    /// <value>The registration vouchers.</value>
    /// <autogeneratedoc />
    public DbSet<RegistrationVoucher> RegistrationVouchers { get; set; } = null!;

    /// <summary>Gets or sets the tasks.</summary>
    /// <value>The tasks.</value>
    public DbSet<Task> Tasks { get; set; } = null!;

    /// <summary>Gets or sets the users.</summary>
    /// <value>The users.</value>
    /// <autogeneratedoc />
    public DbSet<User> Users { get; set; } = null!;

    /// <summary>Gets or sets the chunks.</summary>
    /// <value>The chunks.</value>
    public DbSet<Chunk> Chunks { get; set; } = null!;

    /// <inheritdoc />
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccessGroup>(entity =>
        {
            entity.HasMany(e => e.RegistrationVouchers).WithOne(e => e.AccessGroup).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasMany(e => e.Hashlists).WithOne(e => e.AccessGroup).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasMany(e => e.Agents).WithMany(e => e.AccessGroups);
            entity.HasMany(e => e.TaskWrappers).WithOne(e => e.AccessGroup).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasMany(e => e.Users).WithMany(e => e.AccessGroups);
        });

        modelBuilder.Entity<Agent>(entity =>
        {
            entity.HasIndex(e => e.Token);
            entity.HasIndex(e => e.Uid);
            entity.HasMany(e => e.Zaps).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Stats).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Chunks).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.AccessGroups).WithMany(e => e.Agents);
            entity.HasMany(e => e.Assignments).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Errors).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.HealthCheckAgents).WithOne(e => e.Agent).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<AgentBinary>(entity =>
        {
            entity.HasBaseType<DownloadableBinary>();
            entity.HasIndex(e => e.Type);
        });

        modelBuilder.Entity<AgentError>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.Errors).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasOne(e => e.Task).WithMany(e => e.AgentErrors).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasOne(e => e.Chunk).WithMany(e => e.Errors).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<AgentStat>(entity => entity.HasOne(d => d.Agent).WithMany(p => p.Stats));

        modelBuilder.Entity<ApiKey>(entity =>
        {
            entity.HasOne(d => d.ApiGroup).WithMany(p => p.ApiKeys).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.ApiKeys).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Assignment>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.Assignments);
            entity.HasOne(d => d.Task).WithMany(p => p.Assignments);
        });

        modelBuilder.Entity<Chunk>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.Chunks);
            entity.HasMany(e => e.BinaryHashes).WithOne(e => e.Chunk).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasMany(e => e.Hashes).WithOne(e => e.Chunk).OnDelete(DeleteBehavior.ClientSetNull);
            entity.HasOne(d => d.Task).WithMany(p => p.Chunks);
            entity.HasMany(e => e.Errors).WithOne(e => e.Chunk).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<CrackerBinaryType>(entity =>
        {
            entity.HasData(new CrackerBinaryType
            {
                Id = 1,
                TypeName = "hashcat",
                IsChunkingAvailable = true
            });
            entity.HasMany(e => e.CrackerBinaries).WithOne(e => e.CrackerBinaryType).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<CrackerBinary>(entity =>
        {
            entity.HasBaseType<DownloadableBinary>();
            entity.HasOne(d => d.CrackerBinaryType).WithMany(p => p.CrackerBinaries);
            entity.HasMany(e => e.HealthChecks).WithOne(e => e.CrackerBinary).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Tasks).WithOne(e => e.CrackerBinary).OnDelete(DeleteBehavior.Cascade);
        });


        modelBuilder.Entity<File>(entity =>
        {
            entity.HasIndex(e => e.FileName);
            entity.HasIndex(e => e.FileGuid);
            entity.HasOne(d => d.AccessGroup).WithMany(p => p.Files);
            entity.HasMany(e => e.PreconfiguredTasks).WithMany(e => e.Files);
            entity.HasMany(e => e.Tasks).WithMany(e => e.Files);
        });

        modelBuilder.Entity<FileDownload>(entity => { entity.HasOne(d => d.File).WithMany(p => p.FileDownloads); });

        modelBuilder.Entity<Hash>(entity =>
        {
            entity.HasBaseType<HashBase>();
            entity.HasIndex(e => e.IsCracked);
            entity.HasOne(d => d.Chunk).WithMany(p => p.Hashes);
            entity.HasIndex(e => e.IsCracked);
            entity.HasOne(d => d.Hashlist).WithMany(p => p.Hashes).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<BinaryHash>(entity =>
        {
            entity.HasBaseType<HashBase>();
            entity.HasIndex(e => e.IsCracked);
            entity.HasOne(d => d.Chunk).WithMany(p => p.BinaryHashes);
            entity.HasOne(d => d.Hashlist).WithMany(p => p.BinaryHashes).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Hashlist>(entity =>
        {
            entity.HasIndex(e => e.IsSecret);
            entity.HasOne(d => d.AccessGroup).WithMany(p => p.Hashlists);
            entity.HasOne(d => d.HashType).WithMany(p => p.Hashlists);
            entity.HasMany(e => e.TaskWrappers).WithOne(e => e.Hashlist).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Zaps).WithOne(e => e.Hashlist).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Hashes).WithOne(b => b.Hashlist).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.BinaryHashes).WithOne(e => e.Hashlist).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<HealthCheck>(entity =>
        {
            entity.HasOne(d => d.CrackerBinary).WithMany(p => p.HealthChecks);
            entity.HasMany(e => e.HealthCheckAgents).WithOne(e => e.HealthCheck).OnDelete(DeleteBehavior.Cascade);
            entity.HasOne(e => e.CrackerBinary).WithMany(c => c.HealthChecks);
            entity.HasOne(e => e.HashType).WithMany(c => c.HealthChecks);
        });

        modelBuilder.Entity<HealthCheckAgent>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.HealthCheckAgents);
            entity.HasOne(d => d.HealthCheck).WithMany(p => p.HealthCheckAgents).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<NotificationSetting>(entity =>
        {
            entity.HasOne(d => d.User)
                  .WithMany(p => p.NotificationSettings)
                  .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PreconfiguredTask>(entity =>
        {
            entity.HasOne(d => d.CrackerBinaryType)
                  .WithMany(p => p.Pretasks)
                  .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<RegistrationVoucher>(entity =>
        {
            entity.HasIndex(e => e.Voucher).IsUnique();
            entity.HasOne(r => r.AccessGroup).WithMany(a => a.RegistrationVouchers);
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasOne(d => d.User)
                  .WithMany(p => p.Sessions)
                  .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Speed>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.Speeds).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Task).WithMany(p => p.Speeds).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SupertaskPretask>(entity =>
        {
            entity.HasOne(d => d.PreconfiguredTask)
                  .WithMany(p => p.SupertaskPretasks)
                  .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Supertask).WithMany(p => p.SupertaskPretasks).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasOne(d => d.CrackerBinary).WithMany(p => p.Tasks).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.CrackerBinaryType).WithMany(p => p.Tasks);

            entity.HasOne(d => d.TaskWrapper).WithMany(p => p.Tasks).OnDelete(DeleteBehavior.SetNull);
            entity.HasMany(e => e.Files).WithMany(e => e.Tasks);

            entity.HasOne(e => e.Preprocessor).WithMany(p => p.Tasks).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<TaskDebugOutput>(entity =>
        {
            entity.HasOne(d => d.Task)
                  .WithMany(p => p.TaskDebugOutputs)
                  .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<TaskWrapper>(entity =>
        {
            entity.HasMany(e => e.Tasks).WithOne(e => e.TaskWrapper).OnDelete(DeleteBehavior.Cascade);
            entity.HasOne(d => d.AccessGroup).WithMany(p => p.TaskWrappers);
            entity.HasOne(d => d.Hashlist).WithMany(p => p.TaskWrappers);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasMany(e => e.Agents).WithOne(e => e.User).OnDelete(DeleteBehavior.SetNull);
            entity.HasMany(e => e.AccessGroups).WithMany(e => e.Users);
            entity.HasMany(e => e.ApiKeys).WithOne(e => e.User).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.NotificationSettings).WithOne(e => e.User).OnDelete(DeleteBehavior.Cascade);
            entity.HasMany(e => e.Sessions).WithOne(e => e.User).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<Zap>(entity =>
        {
            entity.HasOne(d => d.Agent).WithMany(p => p.Zaps);

            entity.HasOne(d => d.Hashlist).WithMany(p => p.Zaps).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<HashType>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.HasKey(e => e.Id);
            entity.HasIndex(e => e.HashcatId).IsUnique();
        });
    }
}
